image: docker:git
services:
  - docker:dind

stages:
  - build
  - build-docker-image
  - release-docker-image
  - deploy

before_script:
  - uname -a
  - echo $CI_REGISTRY
  - echo $CI_REGISTRY_IMAGE

build:
  stage: build
  before_script:
    - gradle -v
    - echo CI_REGISTRY - $CI_REGISTRY
    - echo CI_REGISTRY_IMAGE - $CI_REGISTRY_IMAGE
    - echo CI_PROJECT_DIR - $CI_PROJECT_DIR
    - echo CI_PROJECT_ID - $CI_PROJECT_ID
    - echo CI_PROJECT_NAME - $CI_PROJECT_NAME
    - echo CI_PROJECT_NAMESPACE - $CI_PROJECT_NAMESPACE
    - echo CI_PROJECT_PATH - $CI_PROJECT_PATH
    - echo CI_PROJECT_PATH_SLUG - $CI_PROJECT_PATH_SLUG
  script:
    - gradle clean build
  tags:
    - gradle
    - java

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

build-docker-image:
  stage: build-docker-image
  before_script:
    - gradle -v

  script:
    - gradle clean build
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.startext.ru
    - docker build -t $CONTAINER_TEST_IMAGE -f docker/develop/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
    - docker image prune --force
  tags:
    - docker

release-docker-image:
  stage: release-docker-image
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.startext.ru
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker image prune --force
  only:
    - master
  tags:
    - docker

deploy_staging:
  stage: deploy
#  environment:
#    name: staging
  script:
    - ssh_run "docker-deploy" "10.10.8.11" "$SSH_PRIVATE_KEY" "cd /opt/docker/CrackShot && docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.startext.ru && /usr/local/bin/docker-compose pull && /usr/local/bin/docker-compose down && /usr/local/bin/docker-compose up -d"
  only:
    - develop
  tags:
    - deploy

