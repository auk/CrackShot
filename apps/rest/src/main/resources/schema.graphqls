schema {
  query: Query
}

type Query {
  organization(id: String!) : Organization
  user(id: String!) : User
  userDetails(id: String) : UserDetails
}

type Organization {
    id: ID!
    name: String!
    email: String
    web: String
    members: [ OrganizationMembership! ]
}

type OrganizationMembership {
  id: ID!
  organization: Organization!
  user: User!
  admin: Boolean
}

enum OrganizationMembershipStatusEnum {
  NEW
  ACCEPTED
  REJECTED
}

type OrganizationMembershipInvitation {
  organization: Organization!
  user: User!
  createdString: String!
  resolvedDate: String
  status: OrganizationMembershipStatusEnum
}

type OrganizationMembershipRequest {
  organization: Organization!
  user: User!
  createdString: String!
  resolvedDate: String
  status: OrganizationMembershipStatusEnum
}

type User {
  id: ID!
  username: String!
  name: String!
  email: String
  roles: [ String! ]
}

type UserDetails {
  memberships: [ OrganizationMembership! ]
  trainings: [ TrainingParticipant! ]
  trainingsAmount: Int
}

type Training {
  organization: Organization
  date: String!
  time: String
  trainingElements: [ String! ]
  participants: [ TrainingParticipant! ]
}

type TrainingParticipant {
  organization: Organization
  training: Training!
  user: User!
  shots: Int
  cost: Int
  date: String!
  time: String!
}